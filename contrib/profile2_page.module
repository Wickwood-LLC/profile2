<?php

/**
 * @file
 * Adds separate pages for viewing and editing profiles.
 */

/**
 * Implements hook_menu().
 */
function profile2_page_menu() {
  $items = array();

  // Bugfix for uninstalling the module, see http://drupal.org/node/1008346.
  if (!module_exists('profile2')) {
    return;
  }

  $profile2_view_tab_count = 0;
  foreach (profile2_get_types() as $type_name => $type) {
    if (!empty($type->data['use_page'])) {
      $path = profile2_page_get_base_path($type);
      $count = count(explode('/', $path));

      // This is the menu item for opening the user's own profile page.
      $items[$path] = array(
        'title callback' => 'profile2_page_title',
        'title arguments' => array($type_name, TRUE),
        'page callback' => 'profile2_page_own',
        'page arguments' => array($path),
        'access callback' => 'user_access',
        'access arguments' => array("view own $type_name profile"),
        'file' => 'profile2_page.inc',
        'menu_name' => 'user-menu',
      );

      // This is the router item that opens the page view.
      $items[$path . '/%profile2_by_uid'] = array(
        // Title is added in profile2_page_preprocess_page().
        'page callback' => 'profile2_page_view',
        'page arguments' => array($count),
        'load arguments' => array($type_name),
        'access callback' => 'profile2_access',
        'access arguments' => array('view', $count),
        'file' => 'profile2_page.inc',
        'type' => MENU_CALLBACK,
      );
      $items[$path . '/%profile2_by_uid/view'] = array(
        'title' => 'View',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'load arguments' => array($type_name),
        'weight' => -10,
      );
      $items[$path . '/%profile2_by_uid/edit'] = array(
        'page callback' => 'entity_ui_get_form',
        'page arguments' => array('profile2', $count),
        'load arguments' => array($type_name),
        'access callback' => 'profile2_access',
        'access arguments' => array('edit', $count),
        'title' => 'Edit',
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
        'file' => 'profile2_page.inc',
      );
      $items[$path . '/%profile2_by_uid/delete'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('profile2_page_delete_confirm_form', $count),
        'load arguments' => array($type_name),
        'access callback' => 'profile2_access',
        'access arguments' => array('delete', $count),
        'title' => 'Delete',
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_INLINE,
        'file' => 'profile2_page.inc',
      );
      // Devel integration.
      if (module_exists('devel')) {
        $devel_path = drupal_get_path('module', 'devel');
        $items[$path . '/%profile2_by_uid/devel'] = array(
          'title' => 'Devel',
          'page callback' => 'devel_load_object',
          'file' => 'devel.pages.inc',
          'file path' => $devel_path,
          'page arguments' => array('profile2', $count),
          'access arguments' => array('access devel information'),
          'type' => MENU_LOCAL_TASK,
          'weight' => 100,
        );
        $items[$path . '/%profile2_by_uid/devel/load'] = array(
          'title' => 'Load',
          'type' => MENU_DEFAULT_LOCAL_TASK,
        );
        $items[$path . '/%profile2_by_uid/devel/render'] = array(
          'title' => 'Render',
          'page callback' => 'devel_render_object',
          'page arguments' => array('profile2', $count),
          'access arguments' => array('access devel information'),
          'file' => 'devel.pages.inc',
          'file path' => $devel_path,
          'type' => MENU_LOCAL_TASK,
          'weight' => 100,
        );
      }
    }
    else if (!empty($type->data['use_tab'])) {
      // Make tab(s) under user profile page.
      $items['user/%profile2_by_uid/view/' . $type_name] = array(
        'title callback' => 'profile2_page_title',
        'title arguments' => array($type_name),
        'page callback' => 'profile2_page_view',
        'page arguments' => array(1),
        'load arguments' => array($type_name),
        'access callback' => 'profile2_access',
        'access arguments' => array('view', 1),
        'type' => MENU_LOCAL_TASK,
        'file' => 'profile2_page.inc',
      );
      $items['user/%user/revisions/' . $type_name] = array(
        'page callback' => 'profile2_revisions_view_for_user',
        'page arguments' => array($type_name, 1),
        'access callback' => '_profile2_revision_tab_access',
        'access arguments' => array($type_name, 1, array('view own profile revisions', 'view any profile revisions')),
        'title callback' => 'check_plain',
        'title arguments' => array($type->getTranslation('label')),
        'type' => MENU_LOCAL_TASK,
        'file' => 'profile2_page.revisions.inc',
      );

      $items['user/%user/revisions/' . $type_name . '/%/view'] = array(
        'title' => 'Revisions',
        'page callback' => 'profile2_page_tab_revision_view',
        'page arguments' => array($type_name, 1, 4),
        'access callback' => '_profile2_revision_tab_access',
        'access arguments' => array($type_name, 1, array('view own profile revisions', 'view any profile revisions')),
        'file' => 'profile2_page.revisions.inc',
      );
      $items['user/%user/revisions/' . $type_name . '/%/revert'] = array(
        'title' => 'Revert to earlier revision',
        'page callback' => 'profile2_page_tab_get_revision_revert',
        'page arguments' => array($type_name, 1, 4),
        'access callback' => '_profile2_revision_tab_access',
        'access arguments' =>  array($type_name, 1, array('revert own profile revisions', 'revert any profile revisions')),
        'file' => 'profile2_page.revisions.inc',
      );
      $items['user/%user/revisions/' . $type_name . '/%/delete'] = array(
        'title' => 'Delete earlier revision',
        'page callback' => 'profile2_page_tab_get_revision_delete',
        'page arguments' => array($type_name, 1, 4),
        'access callback' => '_profile2_revision_tab_access',
        'access arguments' =>  array($type_name, 1, array('delete own profile revisions', 'delete any profile revisions')),
        'file' => 'profile2_page.revisions.inc',
      );
    }
    $profile2_view_tab_count++;
  }
  // If there exists at least one tab for profile2 type,
  // then we need to create default tab for user account page.
  if ($profile2_view_tab_count) {
    $items['user/%user/view/account'] = array(
      'title' => 'Account',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    );
  }
  return $items;
}

/**
 * Implements hook_menu_alter()
 */
function profile2_page_menu_alter(&$items) {
  //If user revisions from user_revisions module exists then make it default tab.
  if (isset($items['user/%user/revisions'])) {
    if (!isset($items['user/%user/revisions/list'])) {
      $items['user/%user/revisions/list'] = array(
        'title' => 'Account',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
      );
    }
    else {
      $items['user/%user/revisions/list']['title'] = 'Account';
    }
  }
}

/**
 * Implements hook_admin_paths().
 */
function profile2_page_admin_paths() {
  // Show revision pages admin overlay when possible.
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'user/*/revisions/*' => TRUE,
    );
    return $paths;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 */
function profile2_page_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // If viewing a profile sub-tab, change the URL of the edit tab (if present)
  // so it edits the profile, not the main account page.
  // Subject to edit permissions.
  if (strpos($root_path, 'user/%/view/') === 0) {
    // Get the part of the URL containing "user/<uid>".
    $href = $router_item['tab_root_href'] . '/edit';
    // Get the uid & profile type name.
    $uid = $router_item['original_map'][1];
    $ptype = $router_item['original_map'][3];
    if (profile2_access('edit', profile2_by_uid_load($uid, $ptype))) {
      //Walk the menu tree to find the account-edit link, and append the profile type.
      array_walk_recursive($data, function (&$item) use ($href, $ptype) {
        if ($item == $href) {
          $item .= "/$ptype";
        }
      });
    }
  }

  // Add local action link to edit the profile when viewing the profile.
  if (preg_match("~user/%/view/([a-z]+[a-z_]*)~", $root_path, $match)) {
    $uid = arg(1);
    $item = menu_get_item("user/$uid/edit/{$match[1]}");
    if ($item['access']) {
      $item['title'] = t('Edit @type_name', array('@type_name' => $item['title']));
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
  // Add local action link to view the profile when editing the profile.
  if (preg_match("~user/%/edit/([a-z]+[a-z_]*)~", $root_path, $match)) {
    $uid = arg(1);
    $item = menu_get_item("user/$uid/view/{$match[1]}");
    if ($item['access']) {
      $item['title'] = t('View @type_name', array('@type_name' => $item['title']));
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Returns the base path to use as profile page.
 */
function profile2_page_get_base_path($profile_type) {
  // Allow for an easy customization of the page's base path.
  if (!empty($profile_type->data['page_path'])) {
    return $profile_type->data['page_path'];
  }
  return 'profile-' . $profile_type->type;
}

/**
 * Implements hook_forms().
 */
function profile2_page_forms($form_id, $args) {
  // For efficiency, only act if the third argument is 'profile2'.
  if (isset($args[2]) && is_string($args[2]) && $args[2] == 'profile2') {
    $info = entity_get_info('profile2');
    // Translate bundle form ids to the base form id 'profile2_form'.
    foreach ($info['bundles'] as $bundle => $bundle_info) {
      $forms['profile2_edit_' . $bundle . '_form']['callback'] = 'profile2_form';
      $forms['profile2_edit_' . $bundle . '_form']['wrapper callback'] = 'entity_ui_form_defaults';
    }
    if (!empty($forms)) {
      // Include the file with profile2_form() callback. This needed when the
      // form is loaded from the outside, for example, from the ajax callback.
      form_load_include($form_state, 'inc', 'profile2_page');
      return $forms;
    }
  }
}

/**
 * Implements hook_profile2_type_load().
 */
function profile2_page_profile2_type_load($types) {
  foreach ($types as $type) {
    if (!empty($type->data['use_page'])) {
      // Disable user categories and the user account view.
      $type->userCategory = FALSE;
      $type->userView = FALSE;
    }
    elseif (!empty($type->data['use_tab'])) {
      $type->userView = FALSE;
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function profile2_page_entity_info_alter(&$entity_info) {
  // Add new view modes for the page.
  $entity_info['profile2']['view modes']['page'] = array(
    'label' => t('Profile page'),
     'custom settings' => FALSE,
  );
  $entity_info['profile2']['view modes']['teaser'] = array(
    'label' => t('Teaser'),
    'custom settings' => FALSE,
  );
  $entity_info['profile2']['uri callback'] = 'profile2_page_uri_callback';
  $entity_info['profile2']['form callback'] = 'profile2_page_form_callback';

  // Integrate with Metatag module to enable metatags support for separate
  // profile pages.
  if (module_exists('metatag')) {
    $entity_info['profile2']['metatags'] = TRUE;
  }
}

/**
 * URI callback pointing to the profile page.
 *
 * @see profile2_pages_entity_info_alter()
 */
function profile2_page_uri_callback($profile) {
  $type = $profile->type();
  if (!empty($type->data['use_page'])) {
    return array('path' => profile2_page_get_base_path($type) . '/' . $profile->uid);
  }
  // Fall back to the default callback.
  return $profile->defaultUri();
}

/**
 * Form callback for entity_form().
 */
function profile2_page_form_callback($profile) {
  // Pre-populate the form-state with the right form include.
  $form_state = form_state_defaults();
  form_load_include($form_state, 'inc', 'profile2_page');
  return entity_ui_get_form('profile2', $profile, 'edit', $form_state);
}

/**
 * Menu title callbacks.
 */
function profile2_page_title($type_name, $my = FALSE) {
  $label = profile2_get_types($type_name)->getTranslation('label');
  if ($my) {
    $label = t('My @title', array('@title' => $label));
  }
  return $label;
}

/**
 * Implements hook_form_FORM_ID_alter() for the profile2 type form..
 */
function profile2_page_form_profile2_type_form_alter(&$form, &$form_state) {
  $type = $form_state['profile2_type'];
  $form['data']['use_page'] = array(
    '#type' => 'checkbox',
    '#title' => t('Provide a separate page for editing profiles.'),
    '#description' => t('If enabled, a separate menu item for viewing and editing the profile is generated, and the profile is hidden from the user account page.'),
    '#default_value' => empty($type->is_new) && !empty($type->data['use_page']),
    '#states' => array(
      'invisible' => array(
       ':input[name="data[use_tab]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['data']['use_tab'] = array(
    '#type' => 'checkbox',
    '#title' => t('Provide a separate tab for viewing profiles.'),
    '#description' => t('If enabled, the profile is shown under a separate tab on the user account page.'),
    '#default_value' => empty($type->is_new) && !empty($type->data['use_tab']),
    '#states' => array(
      'invisible' => array(
       ':input[name="data[use_page]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['data']['#tree'] = TRUE;
}

/**
 * Implements hook_preprocess_page().
 *
 * Fix the page titles on the profile view pages.
 * We want the titles to be the full profile label, giving the user name & profile name.
 *
 * Note: the title for the separate edit page is already correct.
 */
function profile2_page_preprocess_page(&$vars) {
  // This is true for profile2 view pages, both as a tab and a separate page.
  if (!empty($vars['page']['content']['system_main']['profile2'])) {
    // Get the one item, index is unknown..
    $item = reset($vars['page']['content']['system_main']['profile2']);
    // If we've found an item, and it has a profile2 entity, display the title.
    if (!empty($item['#entity'])) {
      $vars['title'] = $item['#entity']->label();
    }
  }
}


function _profile2_revision_tab_access($type, $account, $permissions) {
  $profile = profile2_by_uid_load($account->uid, $type);
  return _profile2_revision_access($profile, $permissions);
}
